openapi: 3.0.0
paths:
  '/user/{user-id}/research/{research-index}':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
      - schema:
          type: string
        name: research-index
        in: path
        required: true
    get:
      summary: Get all metadata and corresponding research id
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  researchId:
                    type: integer
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      type: object
                      properties:
                        port:
                          type: string
                        metadata:
                          type: object
              examples:
                example-1:
                  value:
                    length: 1
                    projectId: 5
                    list:
                      - - port: port-zenodo
                          metadata:
                            titles:
                              - title: long title
                                lang: en
                            publisher: research publisher gmbh
                            type:
                              resourceType: ''
                              resourceTypeGeneral: Poster
      operationId: api.UserResearch.get
      description: This endpoint returns the projectId for the given user and the index of project. This is an endpoint for convenience.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                - type: 'null'
            examples:
              example-1:
                value:
                  titles: ''
                  publisher: ''
                  type: ''
    patch:
      summary: Modify a research
      operationId: api.UserResearch.patch
      responses:
        '200':
          description: 'OK, metadata used from request body'
          content:
            application/json:
              schema:
                description: 'This will returns only the updated fields, because this service redirects only the output from ports.'
                oneOf:
                  - type: object
                    properties:
                      length:
                        type: integer
                      list:
                        type: array
                        items:
                          type: object
                  - type: 'null'
                    properties: {}
              examples:
                example-1:
                  value:
                    - port: port-zenodo
                      metadata:
                        titles:
                          - title: long title
                            lang: en
                        publisher: research publisher gmbh
                        type:
                          resourceType: ''
                          resourceTypeGeneral: Poster
        '202':
          description: 'Created, metadata taken from EFSS folder automatically, because there were no request body'
        '404':
          description: Not found a ro-crate file in the configured EFSS folder.
      description: 'If no metadata were sent, the RO-Crate file will be used in the configured EFSS folder.'
    put:
      summary: Finish research
      responses:
        '200':
          description: OK
      description: 'Finish this research, for example publish it in the corresponding metadata service and set status to done.'
      operationId: api.UserResearch.put
  '/research/{research-id}':
    parameters:
      - schema:
          type: string
        name: research-id
        in: path
        required: true
    get:
      summary: Get all metadata from given research
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      type: object
                      properties:
                        port:
                          type: string
                        metadata:
                          type: object
              examples:
                example-1:
                  value:
                    length: 1
                    list:
                      - - port: port-zenodo
                          metadata:
                            titles:
                              - title: long title
                                lang: en
                            publisher: research publisher gmbh
                            type:
                              resourceType: ''
                              resourceTypeGeneral: Poster
      description: |-
        Take a look at the datacite specification (https://raw.githubusercontent.com/datacite/schema/master/source/json/kernel-4.3/datacite_4.3_schema.json) for all useable keywords. 

        See the examples to see, how to use it.
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                - type: 'null'
            examples:
              example-1:
                value:
                  titles: ''
                  publisher: ''
                  type: ''
        description: 'If no keys are given, it returns all metadata.'
    patch:
      summary: Modify a research
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: 'This will returns only the updated fields, because this service redirects only the output from ports.'
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      type: object
              examples:
                example-1:
                  value:
                    - port: port-zenodo
                      metadata:
                        titles:
                          - title: long title
                            lang: en
                        publisher: research publisher gmbh
                        type:
                          resourceType: ''
                          resourceTypeGeneral: Poster
      requestBody:
        description: The given body has to be valid against the datacite jsonschema (without required fields).
        content:
          application/json:
            schema:
              type: object
            examples:
              example-1:
                value:
                  titles:
                    - title: long title
                      lang: en
                  publisher: research publisher gmbh
                  type:
                    resourceType: ''
                    resourceTypeGeneral: Poster
      description: |-
        Take a look at the datacite specification (https://raw.githubusercontent.com/datacite/schema/master/source/json/kernel-4.3/datacite_4.3_schema.json) for all useable keywords. 

        See the examples to see, how to use it.
info:
  version: '1.0'
  title: Metadata Service
  description: This service is responsible for any metadata functionality to get and update all metadata through the ports. This is a convenient way to interact with the metadata from the ports.
  contact:
    name: Peter Heiss
    url: 'https://www.research-data-services.org'
    email: peter.heiss@uni-muenster.de
servers:
  - url: 'http://use-case_metadata:3000/metadata'
    description: ''
components:
  schemas: {}
