openapi: 3.0.0
info:
  title: Token Storage
  version: '1.0'
  contact:
    name: Peter Heiss
    email: peter.heiss@uni-muenster.de
  description: 'This file describes a service, which takes oauth2 flow for rds. This is a extra layer for the central service.'
servers:
  - url: 'http://circle2-port/port-service'
paths:
  /redirect:
    get:
      summary: Redirect the user to the specified uri
      tags: []
      responses:
        '302':
          description: Found
      description: |-
        This endpoint takes all tokens to send it to the central-service to save them there and redirects user to `/authorization-success` or `/authorization-cancel`, if anything is wrong with the given data.

        please specify this endpoint when asked for a redirect-uri.
      parameters:
        - schema:
            type: string
          in: query
          name: code
          description: The oauth2 exchange token from oauth2 service provider.
        - schema:
            type: string
          in: query
          name: state
          description: 'The encoded state string, which does not allow any changes by the user.'
    parameters: []
  '/service/{servicename}':
    parameters:
      - schema:
          type: string
        name: servicename
        in: path
        required: true
    get:
      summary: Returns authorize-url from service.
      tags: []
      responses:
        '200':
          description: |-
            OK

            For the jwt string, take a look at the jwt model.
          content:
            application/json:
              schema:
                type: object
                properties:
                  jwt:
                    type: string
        '404':
          description: Not Found
      description: |-
        This is the normally known `/authorize` URL for oauth2 providers. If http-headers say, it is a machine, it returns a 200 code and give all informations for a manual redirect. Otherwise it redirects to the `/authorize` pages for the oauth2-providers with all needed service relevant informations like client_id.

        This is for easier usability, so you don't have to pull the services before.
  /authorization-success:
    get:
      summary: Returns success page
      tags: []
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: object
                properties: {}
      description: 'Like ownclouds: index.php/apps/oauth2/authorization-successful'
    parameters: []
  /authorization-cancel:
    get:
      summary: Returns cancel page
      tags: []
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: object
                properties: {}
      description: This endpoint represents an invalid oauth2 process.
    parameters: []
  /service:
    get:
      summary: Returns all available services
      tags: []
      responses:
        '200':
          description: |-
            OK

            For the jwt string, take a look at the jwt model.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    jwt:
                      type: string
                    informations:
                      type: object
                      description: A proxy for the informations from every port.
      description: Returns all available services.
  '/user/{user-id}/service':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
    get:
      summary: Get services from user-id
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/service'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      description: Returns all services which the user is registered for.
  '/user/{user-id}/service/{servicename}':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
      - schema:
          type: string
        name: servicename
        in: path
        required: true
    get:
      summary: ''
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonService'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: Get current access token for service.
    delete:
      summary: Delete the service from user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
      description: Remove the user token for service.
  '/user/{user-id}/service/{servicename}/projects':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
      - schema:
          type: string
        name: servicename
        in: path
        required: true
    get:
      summary: Returns all serviceprojects from given service for given user
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/serviceprojects'
        '404':
          description: Not Found
    post:
      summary: Creates a new project in given service for given user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                description: The projectId of the created project.
                properties:
                  projectId:
                    type: string
            application/xml:
              schema:
                type: object
                properties: {}
        '500':
          description: Internal Server Error
  '/user/{user-id}/service/{servicename}/projects/{projects-id}':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
      - schema:
          type: string
        name: servicename
        in: path
        required: true
      - schema:
          type: string
        name: projects-id
        in: path
        required: true
    get:
      summary: Returns specified project in given service for given user
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/serviceprojects'
        '404':
          description: Not Found
    delete:
      summary: Removes given project in given service for given user
      responses:
        '204':
          description: No Content
  /exchange:
    post:
      summary: Exchange the oauth2 code
      tags: []
      responses:
        '204':
          description: No Content
        '400':
          description: Bad Request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                jwt:
                  type: string
        description: |-
          JWT holds the following object with keys:

          state, code, userId, servicename

          state holds all informations from rds.
          code holds the code, which needs to be exchanged.
          userId holds the name of the user, which get the exchanged token. If the userId is not known as master account in token storage, it will be created as master account associated with servicename.
          servicename holds the name of the service, which client secret was used to sign the jwt.

          The jwt has to be signed with the oauth2 client secret for rds from service.

          If userId is not present in jwt, the user_id field in response from oauth2 provider will be used as userId.
      description: ''
  /credentials:
    post:
      summary: ''
      responses:
        '200':
          description: OK
      description: Adds the given credentials to the corresponding user and save it for use
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                servicename:
                  type: string
                password:
                  type: string
                username:
                  type: string
                userId:
                  type: string
components:
  schemas:
    oauth_uri:
      title: OAuth2 URL
      type: object
      description: ''
      properties:
        redirect_uri_full:
          type: string
          description: 'A complete uri with client id, type and redirect_uri.'
        redirect_uri:
          type: string
        client_id:
          type: string
        response_type:
          type: string
        authorize_uri:
          type: string
    oauth:
      title: oauth
      type: object
      properties:
        id:
          type: string
        service:
          type: string
        username:
          type: string
        refresh_token:
          type: string
        access_token:
          type: string
    jwt:
      title: jwt
      type: object
      description: 'This string is a jwt, so it follows the structure: header.payload.signature. The payload follows the defined struct below.'
      properties:
        servicename:
          type: string
        authorize_url:
          type: string
        date:
          type: string
    error:
      title: error
      type: object
      properties:
        error:
          type: string
        http_code:
          type: string
        description:
          type: string
      description: Represents an internal server error.
    serviceprojects:
      title: serviceprojects
      type: object
      properties:
        projectId:
          type: string
        metadata:
          type: object
    service:
      title: service
      type: object
      properties:
        id:
          type: integer
        servicename:
          type: string
        access_token:
          type: string
        projects:
          type: array
          items:
            $ref: '#/components/schemas/serviceprojects'
        informations:
          type: object
          required:
            - fileTransferArchive
            - fileTransferMode
            - implements
          properties:
            credentials:
              type: object
              properties:
                userId:
                  type: boolean
                password:
                  type: boolean
            fileTransferArchive:
              type: integer
            fileTransferMode:
              type: integer
            implements:
              type: array
              description: 'ex. ["fileStorage", "metadata"]'
              items:
                type: string
            authorize_url:
              type: string
            refresh_url:
              type: string
            client_id:
              type: string
            servicename:
              type: string
      required:
        - servicename
        - access_token
        - projects
        - informations
    JsonService:
      description: ''
      type: object
      x-examples:
        example-1:
          data:
            access_token: IY6EObhyvqEHezdDzAQ3bGn8kT2MEg5CCR7kHa4yJn1GjrPOTgs9Zlezzc8XuMLP
            expiration_date: '2021-05-27 18:56:53.466014'
            refresh_token: ''
            service:
              data:
                authorize_url: 'https://sciebords.uni-muenster.de/index.php/apps/oauth2/authorize%3Fredirect_uri=https://sciebords.uni-muenster.de/rds&response_type=code&client_id=H693PGgehViYbyPVjzMkhHPIGNE7JaxRKmm58oLQKNjgUQXyRopsGfPxC6czTq3H'
                client_id: H693PGgehViYbyPVjzMkhHPIGNE7JaxRKmm58oLQKNjgUQXyRopsGfPxC6czTq3H
                client_secret: ''
                fileTransferArchive: 0
                fileTransferMode: 0
                implements:
                  - fileStorage
                refresh_url: 'https://sciebords.uni-muenster.de/index.php/apps/oauth2/api/v1/token'
                servicename: port-owncloud
              type: OAuth2Service
            user:
              data:
                username: admin
              type: User
          type: OAuth2Token
      title: ''
      properties:
        data:
          type: object
          properties:
            access_token:
              type: string
            expiration_date:
              type: string
              minLength: 1
            refresh_token:
              type: string
            service:
              type: object
              required:
                - data
                - type
              properties:
                data:
                  type: object
                  required:
                    - fileTransferArchive
                    - fileTransferMode
                    - implements
                    - servicename
                  properties:
                    authorize_url:
                      type: string
                      minLength: 1
                    client_id:
                      type: string
                      minLength: 1
                    client_secret:
                      type: string
                    fileTransferArchive:
                      type: number
                    fileTransferMode:
                      type: number
                    implements:
                      type: array
                      description: 'ex. ["fileStorage", "metadata"]'
                      items:
                        type: string
                    refresh_url:
                      type: string
                      minLength: 1
                    servicename:
                      type: string
                      minLength: 1
                type:
                  type: string
                  minLength: 1
            user:
              type: object
              required:
                - data
                - type
              properties:
                data:
                  type: object
                  required:
                    - username
                  properties:
                    username:
                      type: string
                      minLength: 1
                type:
                  type: string
                  minLength: 1
          required:
            - access_token
            - service
            - user
        type:
          type: string
          minLength: 1
      required:
        - type
