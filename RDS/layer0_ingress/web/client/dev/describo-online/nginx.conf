upstream api_socket_nodes {
    ip_hash;
    server api:8080;
}
server {
    resolver 127.0.0.11 valid=30s;
    listen       9000;
    listen  [::]:9000;
    server_name  localhost;
    error_log   off;
    access_log  off; 

    gzip            on;
    gzip_min_length 1000;
    gzip_proxied    any;
    gzip_types      text/plain application/json;


    set $ui ui;
    set $api api;

    #charset koi8-r;
    #access_log  /var/log/nginx/host.access.log  main;

    location / {
        # add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        proxy_pass_header Content-Type;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass   http://$ui:9000;
    }

    location ~ ^/api/(.*) {
        add_header 'Cache-Control' 'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0';
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Real-IP  $remote_addr;
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_send_timeout 120;
        proxy_read_timeout 120;
        send_timeout 120;
        proxy_pass   http://$api:8080/$1$is_args$args;
    }

    location /socket.io/ {
        proxy_http_version 1.1;
        proxy_redirect off;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header        Host                    $host;
        proxy_set_header        X-Real-IP               $remote_addr;
        proxy_set_header        X-Forwarded-For         $proxy_add_x_forwarded_for;
        proxy_pass http://api_socket_nodes/socket.io/;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }
}
