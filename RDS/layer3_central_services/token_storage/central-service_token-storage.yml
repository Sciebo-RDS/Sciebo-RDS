info:
  title: Central Service - Token Storage
  version: '1.0'
  contact:
    name: Peter Heiss
    email: peter.heiss@uni-muenster.de
    url: 'http://www.research-data-services.org'
  description: This file describes the interface for the central service "token storage".
  license:
    name: MIT
servers:
  - url: 'http://central-service_token-storage:3000'
paths:
  /token:
    get:
      summary: Returns all tokens
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/JSONToken'
      description: Returns an unfiltered list of all tokens.
      tags:
        - Token
    post:
      summary: Add a token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONResponse'
        '400':
          description: Bad Request
      description: Adds a token to repository.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
                token:
                  $ref: '#/components/schemas/JSONToken'
        description: ''
      tags:
        - token
  /user:
    get:
      summary: Returns user informations
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/JSONUser'
      description: Returns informations from main oauth2-provider
    parameters: []
    post:
      summary: Adds a new user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONResponse'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JSONUser'
        description: Adds a new user to the storage.
      tags:
        - User
      description: Adds a new user.
  '/user/{user-id}':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
    get:
      summary: Get user with id
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONUser'
        '404':
          description: Not Found
      description: Returns the user with specified id.
    delete:
      summary: Remove user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONResponse'
      tags:
        - User
      description: Delete the user with user-id.
  '/token/{token-id}':
    get:
      summary: Get specified token
      tags:
        - token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONToken'
        '404':
          description: Not Found
      description: Returns the specified token.
    parameters:
      - schema:
          type: string
        name: token-id
        in: path
        required: true
    put:
      summary: Update token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONResponse'
      description: Updates a token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JSONToken'
      tags:
        - token
  '/user/{user-id}/token':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
    get:
      summary: Get tokens from specified user
      tags:
        - User
        - token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/JSONToken'
      description: Returns all tokens for the specified user.
    post:
      summary: Add a token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONResponse'
      description: Adds token to the repository.
      tags:
        - User
        - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JSONToken'
  '/service/{servicename}':
    get:
      summary: Get specified service
      tags:
        - Service
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONService'
      description: Returns the specified service.
    parameters:
      - schema:
          type: string
        name: servicename
        in: path
        required: true
    delete:
      summary: ''
      responses:
        '200':
          description: OK
      description: Removes the given service.
  /service:
    get:
      summary: Returns all services
      tags:
        - Service
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  length:
                    type: integer
                  list:
                    type: array
                    items:
                      $ref: '#/components/schemas/JSONService'
      description: Returns all registered services.
    post:
      summary: Adds a new service
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONResponse'
        '400':
          description: Bad Request
        '409':
          description: Conflict
      tags:
        - Service
      description: Adds a new service to storage.
      requestBody:
        content:
          application/json:
            schema:
              anyOf:
                - $ref: '#/components/schemas/LoginService'
                - $ref: '#/components/schemas/OAuthService'
                - $ref: '#/components/schemas/JSONService'
        description: ''
  '/user/{user-id}/token/{token-id}':
    parameters:
      - schema:
          type: string
        name: user-id
        in: path
        required: true
      - schema:
          type: string
        name: token-id
        in: path
        required: true
        description: can be a string or int.
    get:
      summary: Returns the specified token
      tags:
        - User
        - token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONToken'
        '404':
          description: Not Found
      description: |-
        Returns the specified token from the specified user.

        If the token-id is a string, it will returns the corresponding token for the given servicename. Otherwise it needs to be an int and it returns the token in the given position.
    delete:
      summary: Remove token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSONResponse'
        '404':
          description: Not Found
      tags:
        - token
      description: Deletes the specified token from the specified user.
    put:
      summary: ''
      operationId: ''
      responses:
        '200':
          description: OK
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
      description: 'Refresh the corresponding token, if there is a refresh algorithm available (e.g. oauth2).'
components:
  schemas:
    Token:
      title: Token
      type: object
      x-tags:
        - token
      properties:
        service:
          $ref: '#/components/schemas/LoginService'
        access_token:
          type: string
          description: 'The token, which can be used as password for username in service.'
        user:
          $ref: '#/components/schemas/User'
    User:
      title: User
      type: object
      properties:
        username:
          type: string
      x-tags:
        - User
    LoginService:
      title: LoginService
      type: object
      x-tags:
        - Service
      description: 'This handles a username:password service, where the UI will show the user a form to make inputs corresponding to your entries here.'
      x-examples:
        example-1:
          servicename: port-owncloud
          implements:
            - fileStorage
          fileTransferMode: 0
          fileTransferArchive: 0
          credentials:
            userId: true
            password: true
        example-2:
          servicename: port-zenodo
          implements:
            - metadata
          fileTransferMode: 0
          fileTransferArchive: 1
          credentials:
            userId: true
            password: true
      properties:
        servicename:
          type: string
          description: Needs to start with "port-" e.g. "port-zenodo"
        implements:
          type: array
          description: |-
            Specifies, if you implements a fileStorage or metadata port (e.g. Zenodo or OSF)
            valid values here: 
            - "fileStorage"
            - "metadata"
          items:
            type: string
        fileTransferMode:
          type: integer
          description: 'Set value between 0=active and 1=passive. This is relevant for file transfer, because active will trigger the upload via RDS (push mode). Passive will trigger the upload via the service (pull mode).'
        fileTransferArchive:
          description: |-
            A integer mapping, which specifies, what algorithm should be used to store files into an archive.
            If set to one of the followed algorithms, it will be used to store all files to one archive and then transmitted within one call.

            Supported Algorithms:
            - 0: none
            - 1: zip
          type: integer
        credentials:
          type: object
          description: 'It defines, if the user can enter userId and / or password, if this is needed. Most times, you will need userId and password.'
          required:
            - userId
            - password
          properties:
            userId:
              type: boolean
            password:
              type: boolean
        description:
          type: object
          description: A small description of the given service.
        icon:
          type: string
          nullable: true
        infoUrl:
          type: string
        helpUrl:
          type: string
        displayName:
          type: string
          nullable: true
      required:
        - servicename
        - implements
        - fileTransferMode
        - fileTransferArchive
        - credentials
    JSONService:
      title: JSONService
      type: object
      properties:
        type:
          type: string
        data:
          anyOf:
            - $ref: '#/components/schemas/OAuthService'
            - $ref: '#/components/schemas/LoginService'
            - $ref: '#/components/schemas/Error'
    OAuthService:
      title: OAuthService
      type: object
      properties:
        servicename:
          type: string
          description: Needs to start with "port-" e.g. "port-zenodo"
        authorize_url:
          type: string
        refresh_url:
          type: string
        client_id:
          type: string
        client_secret:
          type: string
        implements:
          type: array
          description: |-
            Specifies, if you implements a fileStorage or metadata port (e.g. Zenodo or OSF)
            valid values here: 
            - "fileStorage"
            - "metadata"
          items:
            type: string
        fileTransferMode:
          description: 'Set value between 0=active and 1=passive. This is relevant for file transfer, because active will trigger the upload via RDS (push mode). Passive will trigger the upload via the service (pull mode).'
          type: integer
        fileTransferArchive:
          description: |-
            A integer mapping, which specifies, what algorithm should be used to store files into an archive.
            If set to one of the followed algorithms, it will be used to store all files to one archive and then transmitted within one call.

            Supported Algorithms:
            - 0: none
            - 1: zip
          type: integer
        description:
          type: object
          description: A small description of the given service.
        icon:
          type: string
          nullable: true
        displayName:
          type: string
          nullable: true
        infoUrl:
          type: string
        helpUrl:
          type: string
      required:
        - servicename
        - authorize_url
        - refresh_url
        - client_id
        - client_secret
        - implements
        - fileTransferMode
        - fileTransferArchive
    JSONToken:
      title: JSONToken
      type: object
      properties:
        type:
          type: string
        data:
          anyOf:
            - $ref: '#/components/schemas/Token'
            - $ref: '#/components/schemas/OAuthToken'
            - $ref: '#/components/schemas/Error'
    JSONUser:
      title: JSONUser
      type: object
      properties:
        data:
          anyOf:
            - $ref: '#/components/schemas/User'
            - $ref: '#/components/schemas/Error'
        type:
          type: string
    OAuthToken:
      title: OAuthToken
      type: object
      properties:
        service:
          $ref: '#/components/schemas/OAuthService'
        access_token:
          type: string
        refresh_token:
          type: string
        expiration_date:
          type: integer
        user:
          $ref: '#/components/schemas/User'
    Error:
      title: Error
      type: object
      properties:
        error:
          type: string
        http_code:
          type: string
        description:
          type: string
      description: This model represents an unhandled error raise.
    Success:
      title: Success
      type: object
      properties:
        success:
          type: boolean
    JSONResponse:
      title: JSONResponse
      anyOf:
        - $ref: '#/components/schemas/Error'
        - $ref: '#/components/schemas/Success'
tags:
  - name: User
    description: All user related objects.
  - name: token
    description: All token related objects.
  - name: Service
    description: All service related objects.
openapi: 3.0.0
